package sudokuSolve;

public class SudokuSolver {
	public static final int board_size=9;
	public static void main(String[] args) {
		int [][] board= {
		        {7, 0, 2, 0, 5, 0, 6, 0, 0},
		        {0, 0, 0, 0, 0, 3, 0, 0, 0},
		        {1, 0, 0, 0, 0, 9, 5, 0, 0},
		        {8, 0, 0, 0, 0, 0, 0, 9, 0},
		        {0, 4, 3, 0, 0, 0, 7, 5, 0},
		        {0, 9, 0, 0, 0, 0, 0, 0, 8},
		        {0, 0, 9, 7, 0, 0, 0, 0, 5},
		        {0, 0, 0, 2, 0, 0, 0, 0, 0},
		        {0, 0, 7, 0, 4, 0, 2, 0, 3} 
		      };
		System.out.println("Initial board");
		System.out.println();

		printBoard(board);
		System.out.println();
		solveBoard(board);
		System.out.println("Solved board");
		System.out.println();
		printBoard(board);

	}

	private static void printBoard(int[][] board) {
		for(int row=0;row<board_size;row++) {
			if(row%3==0 && row!=0) {
				System.out.println("-----------");
			}
			for(int column=0;column<board_size;column++) {
				if(column%3==0 && column!=0) {
					System.out.print("|");
				}
				System.out.print(board[row][column]);
			}
			System.out.println();
		}
	}
	private static boolean isNumberInRow(int board[][],int row,int number) {
		for(int i=0;i<board_size;i++) {
			if(board[row][i]==number) {
				return true;
			}
		}
		return false;
	}
	private static boolean isNumberInColumn(int board[][],int column,int number) {
		for(int i=0;i<board_size;i++) {
			if(board[i][column]==number) {
				return true;
			}
		}
		return false;
	}
	private static boolean isNumberInBox(int board[][],int row,int column,int number) {
		int cur_row=row-row%3;
		int cur_col=column-column%3;
		for(int i=cur_row;i<cur_row+3;i++) {
			for(int j=cur_col;j<cur_col+2;j++) {
				if(board[i][j]==number) {
					return true;
				}
			}
		}
		return false;
	}
	private static boolean isValidNumber(int board[][],int row,int column,int number) {
		return !isNumberInRow(board,row,number) && 
				!isNumberInColumn(board,column,number) 
				&& !isNumberInBox(board,row,column,number);
	}
	private static boolean solveBoard(int[][] board) {
		for(int row=0;row<board_size;row++) {
			for(int column=0;column<board_size;column++) {
				if(board[row][column]==0) {
					for(int number=1;number<=board_size;number++) {
						if(isValidNumber(board,row,column,number)) {
							board[row][column]=number;
							if(solveBoard(board)) {
								return true;
							}
							else {
								board[row][column]=0;
							}
						}
					}
					return false;
				}
			}
		}
		return true;
	}
	

}
